barcodes <- if (grepl("\\.gz$", barcode_file[1])) {
read.table(gzfile(barcode_path), header = FALSE, stringsAsFactors = FALSE)$V1
} else {
read.table(barcode_path, header = FALSE, stringsAsFactors = FALSE)$V1
}
gene_path <- file.path(path, gene_file[1])
genes <- if (grepl("\\.gz$", gene_file[1])) {
read.table(gzfile(gene_path), header = FALSE, stringsAsFactors = FALSE)
} else {
read.table(gene_path, header = FALSE, stringsAsFactors = FALSE)
}
rownames(mat) <- genes$V1
colnames(mat) <- barcodes
sce <- SingleCellExperiment(assays = list(counts = mat))
rowData(sce)$symbol <- if (ncol(genes) >= 2) genes$V2 else genes$V1
return(sce)
}
# ---------- Dynamically Get All Sample Folders ----------
base_path <- "data/scRNA"
sample_dirs <- list.dirs(base_path, recursive = FALSE)
# ---------- Read All Samples ----------
sce_list <- list()
for (dir in sample_dirs) {
sample_name <- basename(dir)
cat("\nLoading", sample_name, "...\n")
sce <- read_10x_mtx(dir)
colData(sce)$Sample <- sample_name
sce_list[[sample_name]] <- sce
}
setwd("C:/Users/Utkarsh/xenotransplant/cytomapper-port/data")
library(DropletUtils)
library(cytomapper)
library(SingleCellExperiment)
library(Matrix)
read_10x_mtx <- function(path) {
all_files <- list.files(path)
mtx_file     <- all_files[grepl("matrix.*\\.mtx(\\.gz)?$", all_files)]
barcode_file <- all_files[grepl("barcodes.*\\.tsv(\\.gz)?$", all_files)]
gene_file <- all_files[grepl("(genes|features).*\\.tsv(\\.gz)?$", all_files, ignore.case = TRUE)]
cat("Files found in", path, ":\n")
cat("Matrix files:", paste(mtx_file, collapse=", "), "\n")
cat("Barcode files:", paste(barcode_file, collapse=", "), "\n")
cat("Gene files:", paste(gene_file, collapse=", "), "\n")
if(length(mtx_file) == 0) stop("No matrix.mtx file found")
if(length(barcode_file) == 0) stop("No barcodes.tsv file found")
if(length(gene_file) == 0) stop("No genes.tsv file found")
mat <- readMM(file.path(path, mtx_file[1]))
barcode_path <- file.path(path, barcode_file[1])
barcodes <- if (grepl("\\.gz$", barcode_file[1])) {
read.table(gzfile(barcode_path), header = FALSE, stringsAsFactors = FALSE)$V1
} else {
read.table(barcode_path, header = FALSE, stringsAsFactors = FALSE)$V1
}
gene_path <- file.path(path, gene_file[1])
genes <- if (grepl("\\.gz$", gene_file[1])) {
read.table(gzfile(gene_path), header = FALSE, stringsAsFactors = FALSE)
} else {
read.table(gene_path, header = FALSE, stringsAsFactors = FALSE)
}
rownames(mat) <- genes$V1
colnames(mat) <- barcodes
sce <- SingleCellExperiment(assays = list(counts = mat))
rowData(sce)$symbol <- if (ncol(genes) >= 2) genes$V2 else genes$V1
return(sce)
}
# ---------- Dynamically Get All Sample Folders ----------
base_path <- "data/scRNA"
sample_dirs <- list.dirs(base_path, recursive = FALSE)
# ---------- Read All Samples ----------
sce_list <- list()
for (dir in sample_dirs) {
sample_name <- basename(dir)
cat("\nLoading", sample_name, "...\n")
sce <- read_10x_mtx(dir)
colData(sce)$Sample <- sample_name
sce_list[[sample_name]] <- sce
}
getwd()
setwd("C:/Users/Utkarsh/xenotransplant/cytomapper-port/data/scRNA")
getwd()
library(DropletUtils)
library(cytomapper)
library(SingleCellExperiment)
library(Matrix)
read_10x_mtx <- function(path) {
all_files <- list.files(path)
mtx_file     <- all_files[grepl("matrix.*\\.mtx(\\.gz)?$", all_files)]
barcode_file <- all_files[grepl("barcodes.*\\.tsv(\\.gz)?$", all_files)]
gene_file <- all_files[grepl("(genes|features).*\\.tsv(\\.gz)?$", all_files, ignore.case = TRUE)]
cat("Files found in", path, ":\n")
cat("Matrix files:", paste(mtx_file, collapse=", "), "\n")
cat("Barcode files:", paste(barcode_file, collapse=", "), "\n")
cat("Gene files:", paste(gene_file, collapse=", "), "\n")
if(length(mtx_file) == 0) stop("No matrix.mtx file found")
if(length(barcode_file) == 0) stop("No barcodes.tsv file found")
if(length(gene_file) == 0) stop("No genes.tsv file found")
mat <- readMM(file.path(path, mtx_file[1]))
barcode_path <- file.path(path, barcode_file[1])
barcodes <- if (grepl("\\.gz$", barcode_file[1])) {
read.table(gzfile(barcode_path), header = FALSE, stringsAsFactors = FALSE)$V1
} else {
read.table(barcode_path, header = FALSE, stringsAsFactors = FALSE)$V1
}
gene_path <- file.path(path, gene_file[1])
genes <- if (grepl("\\.gz$", gene_file[1])) {
read.table(gzfile(gene_path), header = FALSE, stringsAsFactors = FALSE)
} else {
read.table(gene_path, header = FALSE, stringsAsFactors = FALSE)
}
rownames(mat) <- genes$V1
colnames(mat) <- barcodes
sce <- SingleCellExperiment(assays = list(counts = mat))
rowData(sce)$symbol <- if (ncol(genes) >= 2) genes$V2 else genes$V1
return(sce)
}
# ---------- Dynamically Get All Sample Folders ----------
base_path <- "data/scRNA/"
sample_dirs <- list.dirs(base_path, recursive = FALSE)
# ---------- Read All Samples ----------
sce_list <- list()
for (dir in sample_dirs) {
sample_name <- basename(dir)
cat("\nLoading", sample_name, "...\n")
sce <- read_10x_mtx(dir)
colData(sce)$Sample <- sample_name
sce_list[[sample_name]] <- sce
}
getwd()
library(DropletUtils)
library(cytomapper)
library(SingleCellExperiment)
library(Matrix)
read_10x_mtx <- function(path) {
all_files <- list.files(path)
mtx_file     <- all_files[grepl("matrix.*\\.mtx(\\.gz)?$", all_files)]
barcode_file <- all_files[grepl("barcodes.*\\.tsv(\\.gz)?$", all_files)]
gene_file <- all_files[grepl("(genes|features).*\\.tsv(\\.gz)?$", all_files, ignore.case = TRUE)]
cat("Files found in", path, ":\n")
cat("Matrix files:", paste(mtx_file, collapse=", "), "\n")
cat("Barcode files:", paste(barcode_file, collapse=", "), "\n")
cat("Gene files:", paste(gene_file, collapse=", "), "\n")
if(length(mtx_file) == 0) stop("No matrix.mtx file found")
if(length(barcode_file) == 0) stop("No barcodes.tsv file found")
if(length(gene_file) == 0) stop("No genes.tsv file found")
mat <- readMM(file.path(path, mtx_file[1]))
barcode_path <- file.path(path, barcode_file[1])
barcodes <- if (grepl("\\.gz$", barcode_file[1])) {
read.table(gzfile(barcode_path), header = FALSE, stringsAsFactors = FALSE)$V1
} else {
read.table(barcode_path, header = FALSE, stringsAsFactors = FALSE)$V1
}
gene_path <- file.path(path, gene_file[1])
genes <- if (grepl("\\.gz$", gene_file[1])) {
read.table(gzfile(gene_path), header = FALSE, stringsAsFactors = FALSE)
} else {
read.table(gene_path, header = FALSE, stringsAsFactors = FALSE)
}
rownames(mat) <- genes$V1
colnames(mat) <- barcodes
sce <- SingleCellExperiment(assays = list(counts = mat))
rowData(sce)$symbol <- if (ncol(genes) >= 2) genes$V2 else genes$V1
return(sce)
}
# ---------- Dynamically Get All Sample Folders ----------
# Since you're already in data/scRNA, use current directory "."
base_path <- "."
sample_dirs <- list.dirs(base_path, recursive = FALSE)
# Remove any hidden directories (starting with .)
sample_dirs <- sample_dirs[!grepl("^\\./\\.", sample_dirs)]
cat("Found sample directories:\n")
print(sample_dirs)
# ---------- Read All Samples ----------
sce_list <- list()
for (dir in sample_dirs) {
sample_name <- basename(dir)
cat("\nLoading", sample_name, "...\n")
# Add error handling for individual samples
tryCatch({
sce <- read_10x_mtx(dir)
colData(sce)$Sample <- sample_name
sce_list[[sample_name]] <- sce
}, error = function(e) {
cat("Error loading", sample_name, ":", e$message, "\n")
})
}
# ---------- Summary ----------
cat("\nSample summary:\n")
if (length(sce_list) > 0) {
sample_summary <- data.frame(
Sample = names(sce_list),
Genes = sapply(sce_list, nrow),
Cells = sapply(sce_list, ncol)
)
print(sample_summary)
# ---------- Combine ----------
sce_combined <- do.call(cbind, sce_list)
cat("\nCombined object:\n")
print(sce_combined)
cat("\nCells per sample:\n")
print(table(sce_combined$Sample))
} else {
cat("No samples were successfully loaded.\n")
}
getwd()
library(DropletUtils)
library(cytomapper)
library(SingleCellExperiment)
library(Matrix)
read_10x_mtx <- function(path) {
all_files <- list.files(path)
mtx_file     <- all_files[grepl("matrix.*\\.mtx(\\.gz)?$", all_files)]
barcode_file <- all_files[grepl("barcodes.*\\.tsv(\\.gz)?$", all_files)]
gene_file <- all_files[grepl("(genes|features).*\\.tsv(\\.gz)?$", all_files, ignore.case = TRUE)]
cat("Files found in", path, ":\n")
cat("Matrix files:", paste(mtx_file, collapse=", "), "\n")
cat("Barcode files:", paste(barcode_file, collapse=", "), "\n")
cat("Gene files:", paste(gene_file, collapse=", "), "\n")
if(length(mtx_file) == 0) stop("No matrix.mtx file found")
if(length(barcode_file) == 0) stop("No barcodes.tsv file found")
if(length(gene_file) == 0) stop("No genes.tsv file found")
mat <- readMM(file.path(path, mtx_file[1]))
barcode_path <- file.path(path, barcode_file[1])
barcodes <- if (grepl("\\.gz$", barcode_file[1])) {
read.table(gzfile(barcode_path), header = FALSE, stringsAsFactors = FALSE)$V1
} else {
read.table(barcode_path, header = FALSE, stringsAsFactors = FALSE)$V1
}
gene_path <- file.path(path, gene_file[1])
genes <- if (grepl("\\.gz$", gene_file[1])) {
read.table(gzfile(gene_path), header = FALSE, stringsAsFactors = FALSE)
} else {
read.table(gene_path, header = FALSE, stringsAsFactors = FALSE)
}
rownames(mat) <- genes$V1
colnames(mat) <- barcodes
sce <- SingleCellExperiment(assays = list(counts = mat))
rowData(sce)$symbol <- if (ncol(genes) >= 2) genes$V2 else genes$V1
return(sce)
}
# ---------- Dynamically Get All Sample Folders ----------
# Since you're already in data/scRNA, look for sample directories
base_path <- "."
all_dirs <- list.dirs(base_path, recursive = FALSE)
# Filter for sample directories - both GSM* and TH* patterns
sample_dirs <- all_dirs[grepl("(GSM|TH)", basename(all_dirs))]
cat("All directories found:\n")
print(basename(all_dirs))
cat("\nFiltered sample directories (GSM* and TH* patterns):\n")
print(basename(sample_dirs))
# Check each directory for 10X files to verify structure
cat("\nChecking directories for 10X files...\n")
for (dir in sample_dirs) {
files <- list.files(dir)
has_mtx <- any(grepl("matrix.*\\.mtx(\\.gz)?$", files))
has_barcodes <- any(grepl("barcodes.*\\.tsv(\\.gz)?$", files))
has_genes <- any(grepl("(genes|features).*\\.tsv(\\.gz)?$", files, ignore.case = TRUE))
cat(sprintf("%-25s: MTX=%s, Barcodes=%s, Genes=%s\n",
basename(dir), has_mtx, has_barcodes, has_genes))
if (!has_mtx || !has_barcodes || !has_genes) {
cat("  Files found:", paste(files, collapse=", "), "\n")
}
}
# ---------- Read All Samples ----------
sce_list <- list()
for (dir in sample_dirs) {
sample_name <- basename(dir)
cat("\nLoading", sample_name, "...\n")
# Add error handling for individual samples
tryCatch({
sce <- read_10x_mtx(dir)
colData(sce)$Sample <- sample_name
sce_list[[sample_name]] <- sce
}, error = function(e) {
cat("Error loading", sample_name, ":", e$message, "\n")
})
}
# ---------- Summary ----------
cat("\nSample summary:\n")
if (length(sce_list) > 0) {
sample_summary <- data.frame(
Sample = names(sce_list),
Genes = sapply(sce_list, nrow),
Cells = sapply(sce_list, ncol)
)
print(sample_summary)
# ---------- Combine ----------
sce_combined <- do.call(cbind, sce_list)
cat("\nCombined object:\n")
print(sce_combined)
cat("\nCells per sample:\n")
print(table(sce_combined$Sample))
} else {
cat("No samples were successfully loaded.\n")
}
library(DropletUtils)
library(cytomapper)
library(SingleCellExperiment)
library(Matrix)
read_10x_mtx <- function(path) {
all_files <- list.files(path)
# Match compressed or uncompressed matrix/barcode/gene files, case-insensitive
mtx_file     <- all_files[grepl("matrix.*\\.mtx(\\.gz)?$", all_files, ignore.case = TRUE)]
barcode_file <- all_files[grepl("barcodes.*\\.tsv(\\.gz)?$", all_files, ignore.case = TRUE)]
gene_file    <- all_files[grepl("(genes|features).*\\.tsv(\\.gz)?$", all_files, ignore.case = TRUE)]
cat("\n📂 Found in:", path, "\n")
cat("   🧮 Matrix:  ", paste(mtx_file, collapse = ", "), "\n")
cat("   🧬 Barcodes:", paste(barcode_file, collapse = ", "), "\n")
cat("   🧪 Genes:   ", paste(gene_file, collapse = ", "), "\n")
if (length(mtx_file) == 0) stop("❌ No matrix.mtx file found")
if (length(barcode_file) == 0) stop("❌ No barcodes.tsv file found")
if (length(gene_file) == 0) stop("❌ No genes.tsv or features.tsv file found")
mat <- readMM(file.path(path, mtx_file[1]))
# Read barcodes
bc_path <- file.path(path, barcode_file[1])
barcodes <- if (grepl("\\.gz$", barcode_file[1], ignore.case = TRUE)) {
read.table(gzfile(bc_path), header = FALSE, stringsAsFactors = FALSE)$V1
} else {
read.table(bc_path, header = FALSE, stringsAsFactors = FALSE)$V1
}
# Read genes
gene_path <- file.path(path, gene_file[1])
genes <- if (grepl("\\.gz$", gene_file[1], ignore.case = TRUE)) {
read.table(gzfile(gene_path), header = FALSE, stringsAsFactors = FALSE)
} else {
read.table(gene_path, header = FALSE, stringsAsFactors = FALSE)
}
rownames(mat) <- genes$V1
colnames(mat) <- barcodes
sce <- SingleCellExperiment(assays = list(counts = mat))
rowData(sce)$symbol <- if (ncol(genes) >= 2) genes$V2 else genes$V1
return(sce)
}
# ----------- Load ALL Samples from data/scRNA -----------
base_path <- "data/scRNA"
sample_dirs <- list.dirs(base_path, recursive = FALSE)
sce_list <- list()
for (dir in sample_dirs) {
sample_name <- basename(dir)
cat("\n🚀 Loading:", sample_name, "\n")
tryCatch({
sce <- read_10x_mtx(dir)
colData(sce)$Sample <- sample_name
sce_list[[sample_name]] <- sce
}, error = function(e) {
cat("⚠️  Skipped", sample_name, "->", e$message, "\n")
})
}
# ----------- Summary Table -----------
cat("\n📊 Sample Summary:\n")
sample_summary <- data.frame(
Sample = names(sce_list),
Genes = sapply(sce_list, nrow),
Cells = sapply(sce_list, ncol)
)
print(sample_summary)
# ----------- Combine All -----------
sce_combined <- do.call(cbind, sce_list)
View(read_10x_mtx)
library(DropletUtils)
library(cytomapper)
library(SingleCellExperiment)
library(Matrix)
# ----------- Bulletproof 10X Reader -----------
read_10x_mtx <- function(path) {
all_files <- list.files(path)
# Match compressed/uncompressed files (case-insensitive)
mtx_file     <- all_files[grepl("matrix.*\\.mtx(\\.gz)?$", all_files, ignore.case = TRUE)]
barcode_file <- all_files[grepl("barcodes.*\\.tsv(\\.gz)?$", all_files, ignore.case = TRUE)]
gene_file    <- all_files[grepl("(genes|features).*\\.tsv(\\.gz)?$", all_files, ignore.case = TRUE)]
cat("\n📂 Found in:", path, "\n")
cat("   🧮 Matrix:  ", paste(mtx_file, collapse = ", "), "\n")
cat("   🧬 Barcodes:", paste(barcode_file, collapse = ", "), "\n")
cat("   🧪 Genes:   ", paste(gene_file, collapse = ", "), "\n")
if (length(mtx_file) == 0) stop("❌ No matrix.mtx file found")
if (length(barcode_file) == 0) stop("❌ No barcodes.tsv file found")
if (length(gene_file) == 0) stop("❌ No genes.tsv or features.tsv file found")
mat <- readMM(file.path(path, mtx_file[1]))
# Read barcodes
bc_path <- file.path(path, barcode_file[1])
barcodes <- if (grepl("\\.gz$", barcode_file[1], ignore.case = TRUE)) {
read.table(gzfile(bc_path), header = FALSE, stringsAsFactors = FALSE)$V1
} else {
read.table(bc_path, header = FALSE, stringsAsFactors = FALSE)$V1
}
# Read genes
gene_path <- file.path(path, gene_file[1])
genes <- if (grepl("\\.gz$", gene_file[1], ignore.case = TRUE)) {
read.table(gzfile(gene_path), header = FALSE, stringsAsFactors = FALSE)
} else {
read.table(gene_path, header = FALSE, stringsAsFactors = FALSE)
}
rownames(mat) <- genes$V1
colnames(mat) <- barcodes
sce <- SingleCellExperiment(assays = list(counts = mat))
# Optional: store symbol for later use
if (ncol(genes) >= 2) {
rowData(sce)$symbol <- genes$V2
}
return(sce)
}
# ----------- Load ALL samples from data/scRNA -----------
base_path <- "data/scRNA"
sample_dirs <- list.dirs(base_path, recursive = FALSE)
sce_list <- list()
for (dir in sample_dirs) {
sample_name <- basename(dir)
cat("\n🚀 Loading:", sample_name, "\n")
tryCatch({
sce <- read_10x_mtx(dir)
colData(sce)$Sample <- sample_name
sce_list[[sample_name]] <- sce
}, error = function(e) {
cat("⚠️  Skipped", sample_name, "->", e$message, "\n")
})
}
# ----------- Summary Table -----------
cat("\n📊 Sample Summary:\n")
sample_summary <- data.frame(
Sample = names(sce_list),
Genes = sapply(sce_list, nrow),
Cells = sapply(sce_list, ncol)
)
print(sample_summary)
# ----------- Drop rowData to avoid combine errors -----------
for (i in seq_along(sce_list)) {
rowData(sce_list[[i]]) <- NULL
}
# ----------- Combine -----------
sce_combined <- do.call(cbind, sce_list)
library(DropletUtils)
library(cytomapper)
library(SingleCellExperiment)
library(Matrix)
read_10x_mtx <- function(path) {
all_files <- list.files(path)
# Match files (case-insensitive, gz or not)
mtx_file     <- all_files[grepl("matrix.*\\.mtx(\\.gz)?$", all_files, ignore.case = TRUE)]
barcode_file <- all_files[grepl("barcodes.*\\.tsv(\\.gz)?$", all_files, ignore.case = TRUE)]
gene_file    <- all_files[grepl("(genes|features).*\\.tsv(\\.gz)?$", all_files, ignore.case = TRUE)]
cat("\n📂 Found in:", path, "\n")
cat("   🧮 Matrix:  ", paste(mtx_file, collapse = ", "), "\n")
cat("   🧬 Barcodes:", paste(barcode_file, collapse = ", "), "\n")
cat("   🧪 Genes:   ", paste(gene_file, collapse = ", "), "\n")
if (length(mtx_file) == 0) stop("❌ No matrix.mtx file found")
if (length(barcode_file) == 0) stop("❌ No barcodes.tsv file found")
if (length(gene_file) == 0) stop("❌ No genes.tsv or features.tsv file found")
mat <- readMM(file.path(path, mtx_file[1]))
# Read barcodes
bc_path <- file.path(path, barcode_file[1])
barcodes <- if (grepl("\\.gz$", barcode_file[1], ignore.case = TRUE)) {
read.table(gzfile(bc_path), header = FALSE, stringsAsFactors = FALSE)$V1
} else {
read.table(bc_path, header = FALSE, stringsAsFactors = FALSE)$V1
}
# Read genes
gene_path <- file.path(path, gene_file[1])
genes <- if (grepl("\\.gz$", gene_file[1], ignore.case = TRUE)) {
read.table(gzfile(gene_path), header = FALSE, stringsAsFactors = FALSE)
} else {
read.table(gene_path, header = FALSE, stringsAsFactors = FALSE)
}
rownames(mat) <- genes$V1
colnames(mat) <- barcodes
sce <- SingleCellExperiment(assays = list(counts = mat))
# Optionally store symbol
if (ncol(genes) >= 2) {
rowData(sce)$symbol <- genes$V2
}
return(sce)
}
# ----------- Load ALL Samples from data/scRNA -----------
base_path <- "data/scRNA"
sample_dirs <- list.dirs(base_path, recursive = FALSE)
sce_list <- list()
for (dir in sample_dirs) {
sample_name <- basename(dir)
cat("\n🚀 Loading:", sample_name, "\n")
tryCatch({
sce <- read_10x_mtx(dir)
colData(sce)$Sample <- sample_name
sce_list[[sample_name]] <- sce
}, error = function(e) {
cat("⚠️  Skipped", sample_name, "->", e$message, "\n")
})
}
# ----------- Summary Table -----------
cat("\n📊 Sample Summary:\n")
sample_summary <- data.frame(
Sample = names(sce_list),
Genes = sapply(sce_list, nrow),
Cells = sapply(sce_list, ncol)
)
print(sample_summary)
# ----------- Keep only Common Genes Across All Samples -----------
gene_sets <- lapply(sce_list, rownames)
common_genes <- Reduce(intersect, gene_sets)
cat("\n🧬 Common genes across all samples:", length(common_genes), "\n")
for (i in seq_along(sce_list)) {
sce_list[[i]] <- sce_list[[i]][common_genes, ]
rowData(sce_list[[i]]) <- NULL  # Drop symbol to avoid mismatch
}
# ----------- Combine Without Errors -----------
sce_combined <- do.call(cbind, sce_list)
cat("\n✅ Combined SCE object created with", ncol(sce_combined), "cells and", nrow(sce_combined), "genes\n")
# ----------- Show Cell Counts Per Sample -----------
cat("\n📈 Cells per sample:\n")
print(table(sce_combined$Sample))
library(scran)
BiocManager::install("scran", ask = FALSE)
library(scran)
BiocManager::install("scran", ask = FALSE,source-"True")
BiocManager::install("scran", ask = FALSE,source="True")
